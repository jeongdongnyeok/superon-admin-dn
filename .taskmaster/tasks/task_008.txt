# Task ID: 8
# Title: Create End-to-End Integration System
# Status: pending
# Dependencies: 3, 4, 5, 6, 7
# Priority: high
# Description: Develop the system that connects all components (Character Engine, Animation System, TTS, OBS, and TikTok Live) into a cohesive workflow.
# Details:
1. Design integration architecture:
   - Create service communication patterns
   - Define data flow between components
   - Implement event-driven architecture

2. Develop main orchestration service:
   - Create central controller for managing component interactions
   - Implement state management for system status
   - Build error handling and recovery mechanisms

3. Implement message processing pipeline:
   - Create workflow from message receipt to response delivery
   - Build parallel processing where appropriate
   - Implement timeout and fallback mechanisms

4. Create monitoring and logging system:
   - Implement comprehensive logging across all components
   - Build health check system for component status
   - Create alerting for critical failures

5. Develop configuration management:
   - Create centralized configuration system
   - Implement environment-specific settings
   - Build dynamic configuration updates

Example orchestration service:
```javascript
class VirtualCharacterOrchestrator {
  constructor(config) {
    this.config = config;
    this.components = {};
    this.status = 'initializing';
    this.activeCharacter = null;
    this.processingQueue = [];
  }
  
  async initialize() {
    try {
      // Initialize all components
      this.components.langChain = new CharacterEngine(this.config.langChain);
      this.components.animationSystem = new AnimationSystem(this.config.animation);
      this.components.ttsService = new TTSService(this.config.tts);
      this.components.obsController = new OBSController(this.config.obs);
      this.components.tikTokClient = new TikTokLiveClient(this.config.tikTok);
      
      // Connect components
      await this.components.obsController.connect();
      await this.components.tikTokClient.connect();
      
      // Set up event handlers
      this.components.tikTokClient.onSuperChat(this.handleSuperChat.bind(this));
      
      this.status = 'ready';
      return true;
    } catch (error) {
      console.error('Orchestrator initialization failed:', error);
      this.status = 'error';
      return false;
    }
  }
  
  async loadCharacter(characterId) {
    try {
      // Load character data
      const characterData = await fetchCharacterData(characterId);
      
      // Initialize components with character data
      await this.components.langChain.loadCharacter(characterData);
      await this.components.animationSystem.loadCharacter(characterData);
      await this.components.ttsService.loadVoiceProfile(characterId);
      
      // Set up OBS scene
      await this.components.obsController.switchToScene(characterData.defaultScene || 'DefaultCharacterScene');
      await this.components.obsController.updateBrowserSource('CharacterAnimation', 
        `${this.config.baseUrl}/animation?characterId=${characterId}`);
      
      this.activeCharacter = characterData;
      return true;
    } catch (error) {
      console.error('Character loading failed:', error);
      return false;
    }
  }
  
  async startStream() {
    if (!this.activeCharacter) {
      console.error('No character loaded');
      return false;
    }
    
    try {
      // Start OBS streaming
      await this.components.obsController.startStream();
      
      // Play intro animation
      await this.playSequence('intro');
      
      this.status = 'streaming';
      return true;
    } catch (error) {
      console.error('Stream start failed:', error);
      return false;
    }
  }
  
  async stopStream() {
    try {
      // Play outro animation
      await this.playSequence('outro');
      
      // Stop OBS streaming
      await this.components.obsController.stopStream();
      
      this.status = 'ready';
      return true;
    } catch (error) {
      console.error('Stream stop failed:', error);
      return false;
    }
  }
  
  async handleSuperChat(superChat) {
    // Add to processing queue
    this.processingQueue.push({
      type: 'superChat',
      data: superChat,
      timestamp: Date.now()
    });
    
    // Process if not already processing
    if (this.processingQueue.length === 1) {
      this.processNextInQueue();
    }
  }
  
  async processNextInQueue() {
    if (this.processingQueue.length === 0) return;
    
    const item = this.processingQueue[0];
    
    try {
      if (item.type === 'superChat') {
        await this.processSuperChat(item.data);
      }
      
      // Remove processed item
      this.processingQueue.shift();
      
      // Process next item if available
      if (this.processingQueue.length > 0) {
        this.processNextInQueue();
      }
    } catch (error) {
      console.error('Processing failed:', error);
      
      // Remove failed item after certain retries
      // For simplicity, we're removing immediately here
      this.processingQueue.shift();
      
      if (this.processingQueue.length > 0) {
        this.processNextInQueue();
      }
    }
  }
  
  async processSuperChat(superChat) {
    try {
      // Show thinking animation
      await this.components.animationSystem.playAnimation('thinking');
      
      // Generate response
      const response = await this.components.langChain.generateResponse(
        this.activeCharacter.id,
        superChat.content,
        superChat.userId
      );
      
      // Extract emotion from response
      const emotion = this.extractEmotion(response) || 'neutral';
      
      // Generate speech
      const audioUrl = await this.components.ttsService.generateSpeech(
        response.text,
        this.activeCharacter.id,
        emotion
      );
      
      // Play animation with audio
      await this.components.animationSystem.playAnimationWithAudio(
        emotion,
        audioUrl
      );
      
      // Log interaction
      await this.logInteraction({
        characterId: this.activeCharacter.id,
        userId: superChat.userId,
        userMessage: superChat.content,
        response: response.text,
        emotion: emotion,
        superChatAmount: superChat.amount
      });
      
      return true;
    } catch (error) {
      console.error('Super Chat processing failed:', error);
      
      // Play error animation
      await this.components.animationSystem.playAnimation('confused');
      
      return false;
    }
  }
  
  extractEmotion(response) {
    // Extract emotion tag from response
    const match = response.text.match(/\[emotion:\s*([a-z]+)\]/i);
    return match ? match[1].toLowerCase() : null;
  }
  
  async playSequence(sequenceName) {
    // Play predefined animation sequence
    const sequence = this.activeCharacter.sequences[sequenceName];
    if (!sequence) return;
    
    for (const step of sequence) {
      if (step.animation) {
        await this.components.animationSystem.playAnimation(step.animation);
      }
      if (step.audio) {
        await this.components.ttsService.playAudio(step.audio);
      }
      if (step.delay) {
        await new Promise(resolve => setTimeout(resolve, step.delay));
      }
    }
  }
  
  async logInteraction(interaction) {
    try {
      // Store interaction in database
      await db.collection('interactions').add({
        ...interaction,
        timestamp: new Date(),
        sessionId: this.getCurrentSessionId()
      });
    } catch (error) {
      console.error('Failed to log interaction:', error);
    }
  }
  
  getCurrentSessionId() {
    // Generate or retrieve current streaming session ID
    return this.currentSessionId || 'unknown-session';
  }
}
```

# Test Strategy:
1. Test end-to-end workflow with simulated Super Chat messages
2. Verify component integration with mock services
3. Test error handling and recovery mechanisms
4. Measure end-to-end latency from message receipt to response
5. Validate state management across different scenarios
6. Test parallel processing capabilities
7. Verify logging and monitoring functionality
8. Conduct load testing with multiple simultaneous interactions
