import { useState, useEffect, useRef } from 'react';
import axios from 'axios';

type MotionFile = {
  name: string;
  path: string;
  url: string;
};

type CharacterResponse = {
  id: string;
  message: string;
  tags: string[];
  status: string;
  timestamp: string;
};

type Character = {
  id: string;
  name: string;
  description: string;
  image_url: string | null;
  status: string;
  created_at?: string;
};

export default function BroadcastTab() {
  // 임시 캐릭터 ID (실제 환경에 맞게 수정 또는 props/context로 전달)
  const characterId = 'your-character-id';

  // 세션 상태: idle | start | end
  const [sessionStatus, setSessionStatus] = useState<'idle' | 'start' | 'end'>('idle');
  const [currentSessionId, setCurrentSessionId] = useState<string | null>(null);
  // TikTok 채팅 로그
  const [tiktokChats, setTiktokChats] = useState<{user: string, comment: string}[]>([]);
  const tiktokSocketRef = useRef<WebSocket | null>(null);
  const [characters, setCharacters] = useState<Character[]>([]);
const [selectedCharacterId, setSelectedCharacterId] = useState<string>("");
const [motionFiles, setMotionFiles] = useState<MotionFile[]>([]);
const [neutralMotion, setNeutralMotion] = useState<MotionFile | null>(null);
  const [selectedMotion, setSelectedMotion] = useState<string>('');

  const videoRef = useRef<HTMLVideoElement>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');

  // Fetch character list on mount
  useEffect(() => {
    const fetchCharacters = async () => {
      try {
        setIsLoading(true);
        const response = await axios.get('/api/character');
        setCharacters(response.data || []);
      } catch (err) {
        setError('캐릭터 목록을 불러오는 중 오류가 발생했습니다.');
      } finally {
        setIsLoading(false);
      }
    };
    fetchCharacters();
  }, []);

  // Fetch motion files when character is selected
  useEffect(() => {
    if (!selectedCharacterId) {
      setMotionFiles([]);
      setNeutralMotion(null);
      setSelectedMotion("");
      return;
    }
    const fetchMotionFiles = async () => {
      try {
        setIsLoading(true);
        // Assume backend exposes a static file listing endpoint or returns directory listing as JSON
        const response = await axios.get(`/backend/${selectedCharacterId}/motion/list.json`);
        // response.data.files: [{ name, url, path }]
        setMotionFiles(response.data.files || []);
        // Neutral(중립) 영상 자동 탐색
        const neutral = (response.data.files || []).find((f: MotionFile) => f.name.toLowerCase().includes('neutral') || f.name.includes('중립'));
        if (neutral) {
          setNeutralMotion(neutral);
        }
        // Auto-select the first motion file if available
        if (response.data.files?.length > 0) {
          setSelectedMotion(response.data.files[0].url);
        }
      } catch (err) {
        setMotionFiles([]);
        setNeutralMotion(null);
        setSelectedMotion("");
        setError('모션 파일을 불러오는 중 오류가 발생했습니다.');
      } finally {
        setIsLoading(false);
      }
    };
    fetchMotionFiles();
  }, [selectedCharacterId]);

  // TikTok 방송 시작 핸들러
  const handleStartTiktok = async () => {
    console.log('[FRONTEND] TikTok 방송 시작 버튼 클릭');
    const uniqueId = prompt('TikTok LIVE unique_id(RoomID)를 입력하세요:');
    console.log('[FRONTEND] 입력된 unique_id:', uniqueId);
    if (!uniqueId) return;
    try {
      console.log('[FRONTEND] /tiktok/start 요청:', { unique_id: uniqueId });
      await axios.post('/tiktok/start', { unique_id: uniqueId });
      // WebSocket 연결
      if (tiktokSocketRef.current) {
        tiktokSocketRef.current.close();
      }
      const wsProtocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
      const wsUrl = `${wsProtocol}://${window.location.host.replace(/^https?:\/\//, '')}/ws/tiktok`;
      console.log('[FRONTEND] WebSocket 연결 시도:', wsUrl);
      const ws = new window.WebSocket(wsUrl);
      tiktokSocketRef.current = ws;
      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          setTiktokChats(prev => [...prev, data]);
        } catch (err) {
          console.error('[FRONTEND] WebSocket 메시지 파싱 실패:', err);
        }
      };
      ws.onclose = () => {
        tiktokSocketRef.current = null;
        console.log('[FRONTEND] WebSocket 연결 종료');
      };
    } catch (err) {
      console.error('[FRONTEND] /tiktok/start 요청 실패:', err);
      alert('틱톡 방송 시작에 실패했습니다.');
    }
  };

  // Handle motion selection
  const handleMotionSelect = (motionUrl: string) => {
    setSelectedMotion(motionUrl);
    if (videoRef.current) {
      videoRef.current.load();
      videoRef.current.play().catch(e => console.error('Error playing video:', e));
    }
  };

  // 방송 시작
  const handleStartBroadcast = async () => {
    try {
      // 1. 세션 생성 (live_sessions)
      const { data } = await axios.post('http://localhost:8000/sessions/start', {});
      setCurrentSessionId(data.session_id);
      // 2. 캐릭터 status 업데이트
      setSessionStatus('start');
      // 3. 중립(Neutral) 영상 찾기 및 재생
      if (neutralMotion) {
        setSelectedMotion(neutralMotion.url);
        setTimeout(() => {
          if (videoRef.current) {
            videoRef.current.load();
            videoRef.current.play().catch(() => {});
          }
        }, 100);
      }
    } catch (e) {
      alert('방송 시작 중 오류가 발생했습니다.');
    }
  };

  // 방송 종료
  const handleEndBroadcast = async () => {
    try {
      if (currentSessionId) {
        await axios.post('http://localhost:8000/sessions/end', { session_id: currentSessionId });
      }
      setSessionStatus('end');
      setCurrentSessionId(null);
    } catch (e) {
      alert('방송 종료 중 오류가 발생했습니다.');
    }
  };


  // Set video to loop
  useEffect(() => {
    const video = videoRef.current;
    if (video) {
      video.loop = true;
      video.play().catch(e => console.error('Autoplay failed:', e));
    }
  }, [selectedMotion]);

  if (isLoading) {
    return <div className="p-4">로딩 중...</div>;
  }

  if (error) {
    return <div className="p-4 text-red-500">{error}</div>;
  }

  return (
    <div className="flex flex-col h-[calc(100vh-180px)] w-full">
      {/* TikTok 채팅 로그 */}
      <div className="bg-gray-100 rounded-lg p-3 mb-4 max-h-48 overflow-y-auto">
        <div className="font-bold mb-2">TikTok 채팅 로그</div>
        {tiktokChats.length === 0 ? (
          <div className="text-gray-500">아직 채팅이 없습니다.</div>
        ) : (
          <ul className="space-y-1">
            {tiktokChats.map((chat, idx) => (
              <li key={idx}>
                <span className="font-semibold text-blue-700">{chat.user}:</span> {chat.comment}
              </li>
            ))}
          </ul>
        )}
      </div>
      {/* 캐릭터 선택 드롭다운 */}
      <div className="mb-4 flex items-center gap-2">
        <span className="font-bold">캐릭터 선택:</span>
        <select
          className="border rounded px-2 py-1"
          value={selectedCharacterId}
          onChange={e => setSelectedCharacterId(e.target.value)}
        >
          <option value="">캐릭터를 선택하세요</option>
          {characters.map((char) => (
            <option key={char.id} value={char.id}>{char.name}</option>
          ))}
        </select>
      </div>
      {/* 방송 제어 버튼 */}
      <div className="flex gap-4 mb-2">
        <button
          className={`rounded px-4 py-2 font-bold text-white ${sessionStatus === 'start' ? 'bg-red-500' : 'bg-green-500'}`}
          onClick={sessionStatus === 'start' ? handleEndBroadcast : handleStartBroadcast}
          disabled={isLoading}
        >
          {sessionStatus === 'start' ? '방송 종료' : '방송 시작'}
        </button>
        {/* TikTok 방송 시작 버튼 */}
        <button
          className="rounded px-4 py-2 font-bold text-white bg-blue-500"
          onClick={handleStartTiktok}
        >
          TikTok LIVE 시작
        </button>
      </div>
      <div className="flex flex-row flex-1 w-full">
        {/* Left: Video Player - 50% */}
        <div className="flex items-center justify-center p-4 h-full" style={{ width: 360 }}>
          <div className="w-full h-full flex items-center justify-center">
            <div className="bg-black rounded-lg shadow flex items-center justify-center w-full h-full" style={{ width: 360 }}>
              {selectedMotion ? (
                <video
                  ref={videoRef}
                  src={selectedMotion}
                  controls
                  loop
                  style={{ width: 360, height: '100%', objectFit: 'contain', background: 'black', maxWidth: 360, maxHeight: 1280 }}
                  className="rounded-lg"
                />
              ) : (
                <div className="text-gray-400">모션 파일을 선택하세요</div>
              )}
            </div>
          </div>
        </div>
        {/* Right: File List - flex grow */}
        <div className="flex-1 h-full flex flex-col p-4">
          <div className="h-full overflow-hidden flex flex-col">
            <div className="bg-white rounded-lg shadow p-4 flex-1 flex flex-col overflow-hidden">
              <h2 className="text-lg font-semibold mb-4">모션 파일 목록</h2>
              <div className="flex-1 overflow-y-auto space-y-2 pr-2 flex flex-col items-end">
                {selectedCharacterId && motionFiles.length > 0 ? (
                  motionFiles.map((file) => {
                    return (
                      <div
                        key={file.path}
                        className={`p-3 rounded cursor-pointer hover:bg-gray-50 transition-colors ${
                          selectedMotion === file.url
                            ? 'bg-blue-50 border-2 border-blue-300'
                            : 'border border-gray-200 hover:border-blue-100'
                        }`}
                        onClick={() => handleMotionSelect(file.url)}
                        style={{ minWidth: 0, maxWidth: '100%' }}
                      >
                        <div className="font-medium truncate">{file.name}</div>
                        <div className="text-sm text-gray-500 truncate">{file.path}</div>
                      </div>
                    );
                  })
                ) : (
                  <div className="h-full flex items-center justify-center text-gray-500">
                    {selectedCharacterId ? "등록된 모션 파일이 없습니다." : "캐릭터를 먼저 선택하세요."}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
